---
interface Props {
  name: string;
  size?: number;
  class?: string;
}

const { name, size = 24, class: className = "" } = Astro.props;
---

<div
  class={`icon-svg ${className}`}
  style={`width: ${size}px; height: ${size}px;`}
  data-icon={name}
>
</div>

<style>
  .icon-svg {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    color: currentColor;
    transition: all var(--timing-fast) var(--easing-smooth);
    will-change: transform, color;
  }

  .icon-svg:hover {
    transform: scale(1.1);
  }
</style>

<script>
  // Charger les icônes Heroicons depuis le CDN
  async function loadHeroIcon(container: HTMLElement) {
    const iconName = container.dataset.icon;
    if (!iconName) return;

    try {
      // Utiliser le CDN Heroicons
      const response = await fetch(
        `https://cdn.jsdelivr.net/npm/heroicons@2.0.18/24/outline/${iconName}.svg`
      );
      if (!response.ok) {
        console.warn(`Icône ${iconName} non trouvée`);
        return;
      }

      const svgContent = await response.text();
      container.innerHTML = svgContent;

      // Ajuster la taille et les couleurs
      const svg = container.querySelector("svg");
      if (svg) {
        svg.style.width = "100%";
        svg.style.height = "100%";
        svg.style.color = "currentColor";
      }
    } catch (error) {
      console.warn(`Impossible de charger l'icône ${iconName}:`, error);
    }
  }

  // Charger toutes les icônes au chargement de la page
  document.addEventListener("DOMContentLoaded", () => {
    const iconContainers = document.querySelectorAll(".icon-svg[data-icon]");
    iconContainers.forEach(loadHeroIcon);
  });

  // Recharger après les View Transitions Astro
  document.addEventListener("astro:page-load", () => {
    const iconContainers = document.querySelectorAll(".icon-svg[data-icon]");
    iconContainers.forEach(loadHeroIcon);
  });
</script>
